// Copyright 2005-2011 Virtutech AB
dml 1.2;

device afdxES2;


parameter desc = "afdx End System";

parameter documentation = "afdx End System";

parameter byte_order = "big-endian"; 
 
import "utility.dml";
import "io-memory.dml";
import "simics/devs/memory-space.dml";
import "afdx-exchange.dml";
import "interface.dml";
import "config-tables.dml";
import "vl.dml";
import "constant.dml";
import "unpacket_frame.dml";
import "packet-frame.dml";
import "afdxES-register.dml";
import "change_endian.dml";
import "packet-description.dml";
import "quick-sort.dml";
import "binary-search.dml";
import "rm-handler.dml";
header %{
#include <stdio.h>
	//extern void write_mid(MAC_MIB *maca_mib,MAC_MIB *macb_mib, RX_MIB *rx_mib, TX_MIB *tx_mib);
    %}

extern void write_mid(MAC_MIB *maca_mib,MAC_MIB *macb_mib, RX_MIB *rx_mib, TX_MIB *tx_mib);

footer %{
    void write_mid(MAC_MIB *maca_mib,MAC_MIB *macb_mib, RX_MIB *rx_mib, TX_MIB *tx_mib) {

        FILE *mib_file = fopen("./mib_file", "w");    // look at here!
        fprintf(mib_file, "========================================= Mac A mib begin ===================================================");
        fprintf(mib_file, "crc_error: %d\n", maca_mib->crc_error);
        fprintf(mib_file, "delete_little_64: %d\n", maca_mib->delete_little_64);
        fprintf(mib_file, "delete_big_1518: %d\n", maca_mib->delete_big_1518);
        fprintf(mib_file, "input_frame_count: %d\n", maca_mib->input_frame_count);
        fprintf(mib_file, "input_64_127_count: %d\n", maca_mib->input_64_127_count);
        fprintf(mib_file, "input_128_255_count: %d\n", maca_mib->input_128_255_count);
        fprintf(mib_file, "input_256_511_count: %d\n", maca_mib->input_256_511_count);
        fprintf(mib_file, "input_512_1023_count: %d\n", maca_mib->input_512_1023_count);
        fprintf(mib_file, "input_1024_1518_count: %d\n", maca_mib->input_1024_1518_count);
        fprintf(mib_file, "input_frame_byte_count: %d\n", maca_mib->input_frame_byte_count);
        fprintf(mib_file, "output_frame_count: %d\n", maca_mib->output_frame_count);
        fprintf(mib_file, "output_64_127_count: %d\n", maca_mib->output_64_127_count);
        fprintf(mib_file, "output_128_255_count: %d\n", maca_mib->output_128_255_count);
        fprintf(mib_file, "output_256_511_count: %d\n", maca_mib->output_256_511_count);
        fprintf(mib_file, "output_512_1023_count: %d\n", maca_mib->output_512_1023_count);
        fprintf(mib_file, "output_1024_1518_count: %d\n", maca_mib->output_1024_1518_count);
        fprintf(mib_file, "output_frame_byte_count: %d\n", maca_mib->output_frame_byte_count);
        fprintf(mib_file, "first_bit_error_count: %d\n", maca_mib->first_bit_error_count);
        fprintf(mib_file, "ipchecksum_error_count: %d\n", maca_mib->ipchecksum_error_count);
        fprintf(mib_file, "delete_bit_2048_count: %d\n", maca_mib->delete_bit_2048_count);
	
        fprintf(mib_file, "========================================= Mac B mib begin ===================================================");
        fprintf(mib_file, "crc_error: %d\n", macb_mib->crc_error);
        fprintf(mib_file, "delete_little_64: %d\n", macb_mib->delete_little_64);
        fprintf(mib_file, "delete_big_1518: %d\n", macb_mib->delete_big_1518);
        fprintf(mib_file, "input_frame_count: %d\n", macb_mib->input_frame_count);
        fprintf(mib_file, "input_64_127_count: %d\n", macb_mib->input_64_127_count);
        fprintf(mib_file, "input_128_255_count: %d\n", macb_mib->input_128_255_count);
        fprintf(mib_file, "input_256_511_count: %d\n", macb_mib->input_256_511_count);
        fprintf(mib_file, "input_512_1023_count: %d\n", macb_mib->input_512_1023_count);
        fprintf(mib_file, "input_1024_1518_count: %d\n", macb_mib->input_1024_1518_count);
        fprintf(mib_file, "input_frame_byte_count: %d\n", macb_mib->input_frame_byte_count);
        fprintf(mib_file, "output_frame_count: %d\n", macb_mib->output_frame_count);
        fprintf(mib_file, "output_64_127_count: %d\n", macb_mib->output_64_127_count);
        fprintf(mib_file, "output_128_255_count: %d\n", macb_mib->output_128_255_count);
        fprintf(mib_file, "output_256_511_count: %d\n", macb_mib->output_256_511_count);
        fprintf(mib_file, "output_512_1023_count: %d\n", macb_mib->output_512_1023_count);
        fprintf(mib_file, "output_1024_1518_count: %d\n", macb_mib->output_1024_1518_count);
        fprintf(mib_file, "output_frame_byte_count: %d\n", macb_mib->output_frame_byte_count);
        fprintf(mib_file, "first_bit_error_count: %d\n", macb_mib->first_bit_error_count);
        fprintf(mib_file, "ipchecksum_error_count: %d\n", macb_mib->ipchecksum_error_count);
        fprintf(mib_file, "delete_bit_2048_count: %d\n", macb_mib->delete_bit_2048_count);
	
	
        fprintf(mib_file, "========================================= rx mib begin =====================================================");
        fprintf(mib_file, "disable_A_filt_count: %d\n", rx_mib->disable_A_filt_count);
        fprintf(mib_file, "disable_B_filt_count: %d\n", rx_mib->disable_B_filt_count);
        fprintf(mib_file, "A_integrated_filt_count: d\n", rx_mib->A_integrated_filt_count);
        fprintf(mib_file, "B_integrated_filt_count: %d\n", rx_mib->B_integrated_filt_count);
        fprintf(mib_file, "vl_id_filt_count: %d\n", rx_mib->vl_id_filt_count);
        fprintf(mib_file, "redunt_filt_count: %d\n", rx_mib->redunt_filt_count);
        fprintf(mib_file, "port_filt_count: %d\n", rx_mib->port_filt_count);
        fprintf(mib_file, "ip_checksum_filt_count: %d\n", rx_mib->ip_checksum_filt_count);
        fprintf(mib_file, "ip_length_error_filt_count: %d\n", rx_mib->ip_length_error_filt_count);
        fprintf(mib_file, "udp_length_error_filt_count: %d\n", rx_mib->udp_length_error_filt_count);
        fprintf(mib_file, "ip_fragment_error_filt_count: %d\n", rx_mib->ip_fragment_error_filt_count);
        fprintf(mib_file, "overflow_count: %d\n", rx_mib->overflow_count);
        fprintf(mib_file, "rx_icmp_reback_count: %d\n", rx_mib->rx_icmp_reback_count);
        fprintf(mib_file, "rx_ip_data_count: %d\n", rx_mib->rx_ip_data_count);
        fprintf(mib_file, "rx_udp_data_count: %d\n", rx_mib->rx_udp_data_count);
        fprintf(mib_file, "rx_icmp_data_count: %d\n", rx_mib->rx_icmp_data_count);
        fprintf(mib_file, "icmp_overflow_count: %d\n", rx_mib->icmp_overflow_count);
        fprintf(mib_file, "rx_icmp_big_max_count: %d\n", rx_mib->rx_icmp_big_max_count);
        fprintf(mib_file, "rx_buffer_clear_delete_count: %d\n", rx_mib->rx_buffer_clear_delete_count);
	
        fprintf(mib_file, "========================================= tx mib begin =====================================================");
        fprintf(mib_file, "tx_ip_count: %d\n", tx_mib->tx_ip_count);
        fprintf(mib_file, "tx_udp_count: %d\n", tx_mib->tx_udp_count);
        fprintf(mib_file, "tx_icmp_count: %d\n", tx_mib->tx_icmp_count);
	
        fclose(mib_file);
    }
    %}

attribute debug_cfg {
    parameter allocate_type = "bool";
}

connect RDC {
	parameter documentation = "Send frame to RDC";
	parameter configuration = "optional";
	
	interface Send_To_RDC {
		parameter c_type = "Send_To_RDC_interface_t";
	}
}

implement load_cfg_table {
	
	method load_analyse_cam_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(analyse_cfg_cam);

        memcpy($analyse_cfg_cam_array + $analyse_cfg_cam_index, data, data_size);
        $analyse_cfg_cam_index += item_num;
	}
	
	method load_analyse_ram_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(analyse_cfg_ram);
        
		memcpy($analyse_cfg_ram_array + $analyse_cfg_ram_index, data, data_size);
        $analyse_cfg_ram_index += item_num;
	}
	
	method load_transmit_ram_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(transmit_cfg_ram);
		local uint32 i = 0;
			
		memcpy($transmit_cfg_ram_array + $transmit_cfg_ram_index, data, data_size);
        $transmit_cfg_ram_index += item_num;
        
		for(i=0;i<$transmit_cfg_ram_index; i++) {
			$vl[$transmit_cfg_ram_array[i].ram_data_part1.VL_INDEX].valid_id |= (1 << $transmit_cfg_ram_array[i].ram_data_part3.SUB_VL_ID);
        }
	}
	
	method load_scheduling_ram_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(scheduling_cfg_ram);

        memcpy($scheduling_cfg_ram_array + $scheduling_cfg_ram_index, data, data_size);
        $scheduling_cfg_ram_index += item_num;
	}
	
	method load_rm_cam_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(rm_cfg_cam);

        memcpy($rm_cfg_cam_array + $rm_cfg_cam_index, data, data_size);
        $rm_cfg_cam_index += item_num;
	}
	
	method load_rm_ram_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(rm_cfg_ram);
        
		memcpy($rm_cfg_ram_array + $rm_cfg_ram_index, data, data_size);
        $rm_cfg_ram_index += item_num;
	}
	
	method load_fragment_ram_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(fragment_cfg_ram);
        
		memcpy($fragment_cfg_ram_array + $fragment_cfg_ram_index, data, data_size);
        $fragment_cfg_ram_index += item_num;
	}

    method load_cfg_done() {
        call $QuickSortAnalyseCamArray($analyse_cfg_cam_array);
        call $QuickSortRMCamArray($rm_cfg_cam_array);
        call $InitVLEnableInfo();
    }
}

implement Send_To_A664{
	method send_to_A664(int port_id,void *data,int length) {
		$tx_regs.tx_port_id.id = port_id;
        $tx_regs.tx_frame_len.frame_len=length *4;
		call $wrapped_frame(cast(data,uint8*), length *4);
	}
}

connect phyA {
	parameter documentation = "Send data to the first ARINC664 card";
    parameter configuration = "optional";

    interface ieee_802_3_mac {
        parameter c_type = "ieee_802_3_mac_interface_t";
    }
}

connect phyB {
	parameter documentation = "Send data to the fisrt ARINC664 card";
    parameter configuration = "optional";

    interface ieee_802_3_mac {
        parameter c_type = "ieee_802_3_mac_interface_t";
    }
}

implement ieee_802_3_mac {
	method send_frame(uint8 *data, uint32 size) {
        local rm_cfg_cam item;
        local uint8 rm_index;
        local bool is_crc_ok;
        local RM_INFO rm_info;
        
        call $recv_crc_check(data,size,$Table)->(is_crc_ok);
        
        if (is_crc_ok == false) {
            log "info":"crc check failed";
            return;
        }
        
        call $change_endian(data, size);
        
        item.VL_ID = data[4];
        call $BinarySearchRMCfgCamArray($rm_cfg_cam_array, item) -> (rm_index);
        if (rm_index == -1) {
            log "error" : "Can't find this conf in current rm cfg cam table, please check!";
        } else {
            rm_index = $rm_cfg_cam_array[rm_index].address;
        }
        
        call $Init_RM_INFO(&rm_info, rm_index, size);
        
        local uint8 interface_id = data[11] >> 5;
        local uint8 frame_sn = data[size-5];
        local bool is_rm_ok;
        
        call $RM_Handler(&rm_info, interface_id, frame_sn) -> (is_rm_ok);
        if (is_rm_ok) {
            call $unpacket_frame(data, size)->($rx_mib);
        } else {
            log "error" : "Send from unkown network";
        }
    }
    
    method config_bandwidth(uint32 max_bandwidth) {
        $phy_max_bandwidth = max_bandwidth;
    }
}

attribute record_mib_cycle {
    parameter documentation = "";
    parameter type = "f";
    parameter allocate_type = "double";
    parameter configuration = "optional";

    method after_set() {
        call $record_mib();
    }
}

method record_mib() {
    write_mid(&($maca_mib),&($macb_mib) ,&($rx_mib), &($tx_mib));
    after ($record_mib_cycle)
        call $record_mib();
}

method post_init() {
   	call $gen_normal_table($Table);
    call $init_port_queue();
    call $init_udp_flag();
    call $init_vl_cfg();    
    call $record_mib();

    $phy_max_bandwidth = 200;
    $record_mib_cycle = 0.1;
}

