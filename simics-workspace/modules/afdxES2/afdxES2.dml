// Copyright 2005-2011 Virtutech AB
dml 1.2;

device afdxES2;


parameter desc = "afdx End System";

parameter documentation = "afdx End System";

parameter byte_order = "big-endian"; 
 
import "utility.dml";
import "io-memory.dml";
import "simics/devs/memory-space.dml";
import "afdx-exchange.dml";
import "interface.dml";
import "config-tables.dml";
import "vl.dml";
import "constant.dml";
import "unpacket_frame.dml";
import "packet-frame.dml";
import "afdxES-register.dml";
import "change_endian.dml";
import "packet-description.dml";
import "quick-sort.dml";

header %{
#include <stdio.h>
	//extern void write_mid(MAC_MIB *maca_mib,MAC_MIB *macb_mib, RX_MIB *rx_mib, TX_MIB *tx_mib);
    %}

extern void write_mid(MAC_MIB *maca_mib,MAC_MIB *macb_mib, RX_MIB *rx_mib, TX_MIB *tx_mib);

footer %{
    void write_mid(MAC_MIB *maca_mib,MAC_MIB *macb_mib, RX_MIB *rx_mib, TX_MIB *tx_mib) {

        FILE *mib_file = fopen("./mib_file", "w");    // look at here!
        fprintf(mib_file, "========================================= Mac A mib begin ===================================================");
        fprintf(mib_file, "crc_error: %d\n", maca_mib->crc_error);
        fprintf(mib_file, "delete_little_64: %d\n", maca_mib->delete_little_64);
        fprintf(mib_file, "delete_big_1518: %d\n", maca_mib->delete_big_1518);
        fprintf(mib_file, "input_frame_count: %d\n", maca_mib->input_frame_count);
        fprintf(mib_file, "input_64_127_count: %d\n", maca_mib->input_64_127_count);
        fprintf(mib_file, "input_128_255_count: %d\n", maca_mib->input_128_255_count);
        fprintf(mib_file, "input_256_511_count: %d\n", maca_mib->input_256_511_count);
        fprintf(mib_file, "input_512_1023_count: %d\n", maca_mib->input_512_1023_count);
        fprintf(mib_file, "input_1024_1518_count: %d\n", maca_mib->input_1024_1518_count);
        fprintf(mib_file, "input_frame_byte_count: %d\n", maca_mib->input_frame_byte_count);
        fprintf(mib_file, "output_frame_count: %d\n", maca_mib->output_frame_count);
        fprintf(mib_file, "output_64_127_count: %d\n", maca_mib->output_64_127_count);
        fprintf(mib_file, "output_128_255_count: %d\n", maca_mib->output_128_255_count);
        fprintf(mib_file, "output_256_511_count: %d\n", maca_mib->output_256_511_count);
        fprintf(mib_file, "output_512_1023_count: %d\n", maca_mib->output_512_1023_count);
        fprintf(mib_file, "output_1024_1518_count: %d\n", maca_mib->output_1024_1518_count);
        fprintf(mib_file, "output_frame_byte_count: %d\n", maca_mib->output_frame_byte_count);
        fprintf(mib_file, "first_bit_error_count: %d\n", maca_mib->first_bit_error_count);
        fprintf(mib_file, "ipchecksum_error_count: %d\n", maca_mib->ipchecksum_error_count);
        fprintf(mib_file, "delete_bit_2048_count: %d\n", maca_mib->delete_bit_2048_count);
	
        fprintf(mib_file, "========================================= Mac B mib begin ===================================================");
        fprintf(mib_file, "crc_error: %d\n", macb_mib->crc_error);
        fprintf(mib_file, "delete_little_64: %d\n", macb_mib->delete_little_64);
        fprintf(mib_file, "delete_big_1518: %d\n", macb_mib->delete_big_1518);
        fprintf(mib_file, "input_frame_count: %d\n", macb_mib->input_frame_count);
        fprintf(mib_file, "input_64_127_count: %d\n", macb_mib->input_64_127_count);
        fprintf(mib_file, "input_128_255_count: %d\n", macb_mib->input_128_255_count);
        fprintf(mib_file, "input_256_511_count: %d\n", macb_mib->input_256_511_count);
        fprintf(mib_file, "input_512_1023_count: %d\n", macb_mib->input_512_1023_count);
        fprintf(mib_file, "input_1024_1518_count: %d\n", macb_mib->input_1024_1518_count);
        fprintf(mib_file, "input_frame_byte_count: %d\n", macb_mib->input_frame_byte_count);
        fprintf(mib_file, "output_frame_count: %d\n", macb_mib->output_frame_count);
        fprintf(mib_file, "output_64_127_count: %d\n", macb_mib->output_64_127_count);
        fprintf(mib_file, "output_128_255_count: %d\n", macb_mib->output_128_255_count);
        fprintf(mib_file, "output_256_511_count: %d\n", macb_mib->output_256_511_count);
        fprintf(mib_file, "output_512_1023_count: %d\n", macb_mib->output_512_1023_count);
        fprintf(mib_file, "output_1024_1518_count: %d\n", macb_mib->output_1024_1518_count);
        fprintf(mib_file, "output_frame_byte_count: %d\n", macb_mib->output_frame_byte_count);
        fprintf(mib_file, "first_bit_error_count: %d\n", macb_mib->first_bit_error_count);
        fprintf(mib_file, "ipchecksum_error_count: %d\n", macb_mib->ipchecksum_error_count);
        fprintf(mib_file, "delete_bit_2048_count: %d\n", macb_mib->delete_bit_2048_count);
	
	
        fprintf(mib_file, "========================================= rx mib begin =====================================================");
        fprintf(mib_file, "disable_A_filt_count: %d\n", rx_mib->disable_A_filt_count);
        fprintf(mib_file, "disable_B_filt_count: %d\n", rx_mib->disable_B_filt_count);
        fprintf(mib_file, "A_integrated_filt_count: d\n", rx_mib->A_integrated_filt_count);
        fprintf(mib_file, "B_integrated_filt_count: %d\n", rx_mib->B_integrated_filt_count);
        fprintf(mib_file, "vl_id_filt_count: %d\n", rx_mib->vl_id_filt_count);
        fprintf(mib_file, "redunt_filt_count: %d\n", rx_mib->redunt_filt_count);
        fprintf(mib_file, "port_filt_count: %d\n", rx_mib->port_filt_count);
        fprintf(mib_file, "ip_checksum_filt_count: %d\n", rx_mib->ip_checksum_filt_count);
        fprintf(mib_file, "ip_length_error_filt_count: %d\n", rx_mib->ip_length_error_filt_count);
        fprintf(mib_file, "udp_length_error_filt_count: %d\n", rx_mib->udp_length_error_filt_count);
        fprintf(mib_file, "ip_fragment_error_filt_count: %d\n", rx_mib->ip_fragment_error_filt_count);
        fprintf(mib_file, "overflow_count: %d\n", rx_mib->overflow_count);
        fprintf(mib_file, "rx_icmp_reback_count: %d\n", rx_mib->rx_icmp_reback_count);
        fprintf(mib_file, "rx_ip_data_count: %d\n", rx_mib->rx_ip_data_count);
        fprintf(mib_file, "rx_udp_data_count: %d\n", rx_mib->rx_udp_data_count);
        fprintf(mib_file, "rx_icmp_data_count: %d\n", rx_mib->rx_icmp_data_count);
        fprintf(mib_file, "icmp_overflow_count: %d\n", rx_mib->icmp_overflow_count);
        fprintf(mib_file, "rx_icmp_big_max_count: %d\n", rx_mib->rx_icmp_big_max_count);
        fprintf(mib_file, "rx_buffer_clear_delete_count: %d\n", rx_mib->rx_buffer_clear_delete_count);
	
        fprintf(mib_file, "========================================= tx mib begin =====================================================");
        fprintf(mib_file, "tx_ip_count: %d\n", tx_mib->tx_ip_count);
        fprintf(mib_file, "tx_udp_count: %d\n", tx_mib->tx_udp_count);
        fprintf(mib_file, "tx_icmp_count: %d\n", tx_mib->tx_icmp_count);
	
        fclose(mib_file);
    }
    %}

attribute debug_cfg {
    parameter allocate_type = "bool";
}

connect RDC {
	parameter documentation = "Send frame to RDC";
	parameter configuration = "optional";
	
	interface Send_To_RDC {
		parameter c_type = "Send_To_RDC_interface_t";
	}
}

data uint32 analyse_cam_index;
data uint32 analyse_ram_index;
data uint32 transmit_ram_index;
data uint32 scheduling_ram_index;
data uint32 rm_cam_index;
data uint32 rm_ram_index;
data uint32 fragment_ram_index;

implement load_cfg_table {
	
	method load_analyse_cam_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(analyse_cfg_cam);

        memcpy($analyse_cfg_cam_array + $analyse_cfg_cam_index, data, data_size);
        $analyse_cfg_cam_index += item_num;
        
        if ($debug_cfg) {
		    log "info" : "========================= analyse_cfg_cam  begin ========================";
		    log "info" : "%d.ICMP_TYPE_ID = %d", $analyse_cam_index, $analyse_cfg_cam_array[$analyse_cam_index].cam_data_part1.ICMP_TYPE_ID;
		    log "info" : "%d.MULTICAST_ID = %d", $analyse_cam_index, $analyse_cfg_cam_array[$analyse_cam_index].cam_data_part1.MULTICAST_ID;
		    log "info" : "%d.DEST_IP = %d", $analyse_cam_index, $analyse_cfg_cam_array[$analyse_cam_index].cam_data_part2.DEST_IP;
		    log "info" : "%d.VL = %d", $analyse_cam_index, $analyse_cfg_cam_array[$analyse_cam_index].cam_data_part3.VL;
		    log "info" : "%d.DEST_UDP = %d", $analyse_cam_index, $analyse_cfg_cam_array[$analyse_cam_index].cam_data_part3.DEST_UDP;
		    log "info" : "========================= analyse_cfg_cam  end ========================";
		}
	}
	
	method load_analyse_ram_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(analyse_cfg_ram);
        
		memcpy($analyse_cfg_ram_array + $analyse_cfg_ram_index, data, data_size);
        $analyse_cfg_ram_index += item_num;
        
		if ($debug_cfg) {
            log "info" : "========================= analyse_cfg_ram  begin ========================";
		    log "info" : "%d.NETWORK_B_ENABLE = %d", $analyse_ram_index, $analyse_cfg_ram_array[$analyse_ram_index].ram_data.NETWORK_B_ENABLE;
		    log "info" : "%d.NETWORK_A_ENABLE = %d", $analyse_ram_index, $analyse_cfg_ram_array[$analyse_ram_index].ram_data.NETWORK_A_ENABLE;
		    log "info" : "%d.PORT_TYPE = %d", $analyse_ram_index, $analyse_cfg_ram_array[$analyse_ram_index].ram_data.PORT_TYPE;
		    log "info" : "========================= analyse_cfg_ram  end ========================";
        }
	}
	
	method load_transmit_ram_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(transmit_cfg_ram);
		local uint32 i = 0;
			
		memcpy($transmit_cfg_ram_array + $transmit_cfg_ram_index, data, data_size);
        $transmit_cfg_ram_index += item_num;
        
		if ($debug_cfg) {
            log "info" : "========================= transmit_cfg_ram begin ========================";
            log "info" : "%d.PORT_TYPE = %d", $transmit_ram_index, $transmit_cfg_ram_array[$transmit_ram_index].ram_data_part1.PORT_TYPE;
            log "info" : "%d.MIN_FRAME_LENGTH = %d", $transmit_ram_index, $transmit_cfg_ram_array[$transmit_ram_index].ram_data_part1.MIN_FRAME_LENGTH;
            log "info" : "%d.IP_MULTICAST = %d", $transmit_ram_index, $transmit_cfg_ram_array[$transmit_ram_index].ram_data_part1.IP_MULTICAST;
            log "info" : "%d.VL_INDEX = %d", $transmit_ram_index, $transmit_cfg_ram_array[$transmit_ram_index].ram_data_part1.VL_INDEX;
            log "info" : "%d.VL_ID = %d", $transmit_ram_index, $transmit_cfg_ram_array[$transmit_ram_index].ram_data_part1.VL_ID;
            log "info" : "%d.USER_DEFINED_ID = %d", $transmit_ram_index, $transmit_cfg_ram_array[$transmit_ram_index].ram_data_part2.USER_DEFINED_ID;
            log "info" : "%d.PROTOCAL_ID = %d", $transmit_ram_index, $transmit_cfg_ram_array[$analyse_ram_index].ram_data_part2.PROTOCAL_ID;
            log "info" : "%d.INTERFACE_ID = %d", $transmit_ram_index, $transmit_cfg_ram_array[$transmit_ram_index].ram_data_part2.INTERFACE_ID;
            log "info" : "%d.PARTITION_ID = %d", $transmit_ram_index, $transmit_cfg_ram_array[$transmit_ram_index].ram_data_part2.PARTITION_ID;
            log "info" : "%d.SOURCE_UDP_PORT = %d", $transmit_ram_index, $transmit_cfg_ram_array[$transmit_ram_index].ram_data_part3.SOURCE_UDP_PORT;
            log "info" : "%d.DEST_UDP_PORT = %d", $transmit_ram_index, $transmit_cfg_ram_array[$transmit_ram_index].ram_data_part3.DEST_UDP_PORT;
            log "info" : "%d.SUB_VL_ID = %d", $transmit_ram_index, $transmit_cfg_ram_array[$transmit_ram_index].ram_data_part3.SUB_VL_ID;
            log "info" : "========================= transmit_cfg_ram  end ========================";
		}
		
		for(i=0;i<$transmit_cfg_ram_index; i++) {
			$vl[$transmit_cfg_ram_array[i].ram_data_part1.VL_INDEX].valid_id |= (1 << $transmit_cfg_ram_array[i].ram_data_part3.SUB_VL_ID);
        }
	}
	
	method load_scheduling_ram_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(scheduling_cfg_ram);

        memcpy($scheduling_cfg_ram_array + $scheduling_cfg_ram_index, data, data_size);
        $scheduling_cfg_ram_index += item_num;
        
		if ($debug_cfg) {
            log "info" : "========================= scheduling_cfg_ram begin ========================";
            log "info" : "%d.BAG = %d", $scheduling_ram_index, $scheduling_cfg_ram_array[$scheduling_ram_index].BAG;
            log "info" : "========================= scheduling_cfg_ram  end ========================";
		}
	}
	
	method load_rm_cam_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(rm_cfg_cam);

        memcpy($rm_cfg_cam_array + $rm_cfg_cam_index, data, data_size);
        $rm_cfg_cam_index += item_num;
        
		if ($debug_cfg) {
            log "info" : "========================= rm_cfg_cam begin ========================";
            log "info" : "$rm_cfg_cam_array[%d].VL_ID = %d", $rm_cam_index, $rm_cfg_cam_array[$rm_cam_index].VL_ID;
            log "info" : "========================= rm_cfg_cam  end ========================";
		}
	}
	
	method load_rm_ram_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(rm_cfg_ram);
        
		memcpy($rm_cfg_ram_array + $rm_cfg_ram_index, data, data_size);
        $rm_cfg_ram_index += item_num;
        
        if ($debug_cfg) {
            log "info" : "====rm_cfg_ram begin ====";
            log "info" : "%d VL_ENABLE = %d", $rm_ram_index, $rm_cfg_ram_array[$rm_ram_index].ram_data.VL_ENABLE;
            log "info" : "%d SKEW_MAX = %d", $rm_ram_index, $rm_cfg_ram_array[$rm_ram_index].ram_data.SKEW_MAX;
            log "info" : "%d RM_ENABLE = %d", $rm_ram_index, $rm_cfg_ram_array[$rm_ram_index].ram_data.RM_ENABLE;
            log "info" : "%d NETWORK_B_IC_ENABLE = %d", $rm_ram_index, $rm_cfg_ram_array[$rm_ram_index].ram_data.NETWORK_B_IC_ENABLE;
            log "info" : "%d NETWORK_A_IC_ENABLE = %d", $rm_ram_index, $rm_cfg_ram_array[$rm_ram_index].ram_data.NETWORK_A_IC_ENABLE;
            log "info" : "%d NETWORK_B_ENABLE = %d", $rm_ram_index, $rm_cfg_ram_array[$rm_ram_index].ram_data.NETWORK_B_ENABLE;
            log "info" : "%d NETWORK_A_ENABLE = %d", $rm_ram_index, $rm_cfg_ram_array[$rm_ram_index].ram_data.NETWORK_A_ENABLE;	
            log "info" : "==== rm_cfg_ram  end ===";
		}
	}
	
	method load_fragment_ram_cfg_table(uint32 item_num, void *data) {
		local uint32 data_size = item_num * sizeoftype(fragment_cfg_ram);
        
		memcpy($fragment_cfg_ram_array + $fragment_cfg_ram_index, data, data_size);
        $fragment_cfg_ram_index += item_num;
        
        if ($debug_cfg) {
            log "info" : "========================= fragment_cfg_ram begin ========================";
            log "info" : "========================= fragment_cfg_ram begin ========================";
            log "info" : "%d.MAX_FRAME_LENGTH = %d", $fragment_ram_index, $fragment_cfg_ram_array[$fragment_ram_index].MAX_FRAME_LENGTH;
            log "info" : "========================= fragment_cfg_ram end ========================";
		}
	}

    method load_cfg_done() {
        call $QuickSortAnalyseCamArray($analyse_cfg_cam_array);
        call $QuickSortRMCamArray($rm_cfg_cam_array);
    }
}

//called by RDC
implement Send_To_A664{
	method send_to_A664(int port_id,void *data,int length)
	{
		$tx_regs.tx_port_id.id = port_id;
        $tx_regs.tx_frame_len.frame_len=length *4;
		call $wrapped_frame(cast(data,uint8*), length *4);
	}
}

connect phyA {
	parameter documentation = "Send data to ARINC664 1";
    parameter configuration = "optional";
    interface data_exchange {
        parameter c_type = "data_exchange_interface_t";
    }
}

connect phyB {
	parameter documentation = "Send data to ARINC664 1";
    parameter configuration = "optional";
    interface data_exchange {
        parameter c_type = "data_exchange_interface_t";
    }
}


// called by ARINC664
implement data_exchange {
	method send_frame(uint8 *data, uint32 size) {
		log "info" : "called by nic1";
        
        local rm_cfg_cam item;
        
        local uint8 position;
		local bool crc;
    
        call $recv_crc_check(data,size,$Table)->(crc);

        if(crc == false) 
        {
            log "info":"crc check failed";
            return ;
        }
	
        call $change_endian(data,size);
	
        item.VL_ID = *cast(&data[4],uint16*);


        for (position = 0; position < $rm_cfg_cam_index; ++position) {
            log "info" : "The $rm_cfg_cam_array[%d].VL_ID = %x", position, $rm_cfg_cam_array[position].VL_ID;
            log "info" : "The $rm_cfg_cam_array[%d].address = %x", position, $rm_cfg_cam_array[position].address;
        }
        
        call $BinarySearchRMCfgCamArray($rm_cfg_cam_array, item) -> (position);
        
		position = $rm_cfg_cam_array[position].address;
	
        local uint8 VL_ENABLE = $rm_cfg_ram_array[position].ram_data.VL_ENABLE;
        local uint8 RM_ENABLE = $rm_cfg_ram_array[position].ram_data.RM_ENABLE;
        local uint8 NETWORK_A_IC_ENABLE = $rm_cfg_ram_array[position].ram_data.NETWORK_A_IC_ENABLE;
        local uint8 NETWORK_B_IC_ENABLE = $rm_cfg_ram_array[position].ram_data.NETWORK_B_IC_ENABLE;
        local uint8 NETWORK_A_ENABLE = $rm_cfg_ram_array[position].ram_data.NETWORK_A_ENABLE;
        local uint8 NETWORK_B_ENABLE = $rm_cfg_ram_array[position].ram_data.NETWORK_B_ENABLE;
        local uint8 A_Interface_ID;
        local uint8 B_Interface_ID;
        /*
		//for test init start
       	VL_ENABLE = 1;
        RM_ENABLE = 1;
        NETWORK_A_IC_ENABLE = 1;
        NETWORK_B_IC_ENABLE = 1;
        NETWORK_A_ENABLE = 1;
        NETWORK_B_ENABLE = 1;
		//for test init end
		*/
		
		log "info" : "position=%d", position;
		log "info" : "VL_ENABLE=%d",VL_ENABLE;
		log "info" : "RM_ENABLE=%d",RM_ENABLE;
		log "info" : "NETWORK_A_IC_ENABLE=%d",NETWORK_A_IC_ENABLE;
		log "info" : "NETWORK_B_IC_ENABLE=%d",NETWORK_B_IC_ENABLE;
		log "info" : "NETWORK_A_ENABLE=%d",NETWORK_A_ENABLE;
		log "info" : "NETWORK_B_ENABLE=%d",NETWORK_B_ENABLE;
		log "info" : "A_Interface_ID=%d",A_Interface_ID;
		log "info" : "B_Interface_ID=%d",B_Interface_ID;
		
        if (VL_ENABLE == 0) {
            return;
        }
        local uint8 frame_sn = data[size-5];
		local uint8 interface_id;
		interface_id = data[11]>>5;
		log "info" : "interace_id = %d , frame_sn=%d", interface_id,frame_sn;

        if (NETWORK_A_ENABLE == 1) {
            A_Interface_ID = 1;
        } else {
            A_Interface_ID = 0;
        }

        if (NETWORK_B_ENABLE == 1) {
            B_Interface_ID = 2;
        } else {
            B_Interface_ID = 0;
        }
        
		//for mib
		if((interface_id ==1) && (A_Interface_ID ==0))
			$rx_mib.disable_A_filt_count++;
		if((interface_id ==2) && (B_Interface_ID ==0))
			$rx_mib.disable_B_filt_count++;
		
        
       
	    log "info":"interface id = %d,sn = %d",interface_id,$recv_vl[position].expect_sn;
        if ((frame_sn == $recv_vl[position].expect_sn) && ((interface_id == A_Interface_ID) || (interface_id == B_Interface_ID))) {
			$rx_mib.size = size;
            call $unpacket_frame(data, size)->($rx_mib);
            $recv_vl[position].expect_sn++;
            $recv_vl[position].expect_sn %= 256;
			if(interface_id == A_Interface_ID) call $mib_in_sum(&($maca_mib),size);
			else if(interface_id == B_Interface_ID) call $mib_in_sum(&($macb_mib),size);
        } else {
            if (frame_sn != $recv_vl[position].expect_sn) 
                log "info":"^^^^^^^^^^abort interface id = %d,sn = %d^^^^^^^^^^^^",interface_id,$recv_vl[position].expect_sn;
		
            return;
        }
    }    
     
}



implement config_mac_mode {
    method config_mac_mode(uint32 max_bandwidth) {
        $phy_max_bandwidth = max_bandwidth;
    }
}

method record_mib() {
    write_mid(&($maca_mib),&($macb_mib) ,&($rx_mib), &($tx_mib));
    after (1) call $record_mib();
}

method post_init()
{
    memset($udp_first,1,PORT_SIZE);
   	call $gen_normal_table($Table);
    local uint32 i = 0;
    for (; i < PORT_SIZE; ++i) {
        call $InitPortQueue() -> ($port[i].queue);
    }
    local uint32 j = 0;
    for (; j < SEND_VL_NUM; ++j) {
        $vl_index_array[j] = new uint8;
    }
    local uint32 k = 0;
    for (; k < RECV_VL_NUM; ++k) {
        $recv_vl[k].expect_sn = 0;
    }

    call $record_mib();
    log "info": "called ";
   
    $analyse_cam_index = 0;
    $analyse_ram_index = 0;
    $transmit_ram_index = 0;
    $scheduling_ram_index = 0;
    $rm_cam_index = 0;
    $rm_ram_index = 0;
    $fragment_ram_index = 0;
   
    $phy_max_bandwidth = 200;
}

