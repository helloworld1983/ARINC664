dml 1.2;

bank tx_regs {
    parameter register_size = 4;
    register tx_port_id      is (unmapped) "Host send data frame Port ID register";
    register tx_frame_len    is (unmapped) "Host send data frame length register";
    register tx_buf_overflow is (unmapped) "Host send data frame overflow flag register";
	register tx_dst_ip_addr  is (unmapped) "Host send data frame dest ip address";
	register tx_dst_udp_addr is (unmapped) "Host send data frame dest udp address";
}

bank rx_regs {
	parameter register_size = 4;
	register rx_port_id                   is (unmapped) "To query the data frame port id";
	register rx_check_valid               is (unmapped) "Determine whether there is a data frame receiving port";
	register rx_rec_frame                 is (unmapped) "If write one, the device starts reading from the receive data frames Port cache";
	register rx_rec_state                 is (unmapped) "If one, the PCI bus can initiate DMA operation receiving current data frame";
	register rx_frame_len                 is (unmapped) "Analyzing the received data frame";
	register rx_rec_network               is (unmapped) "Determine the data to be received frome port A or B network";
	register rx_rec_time1                 is (unmapped) "Analyzing received data frame time";
	register rx_rec_time2                 is (unmapped) "Analyzing received data frame time";
	register rx_src_ip_addr               is (unmapped) "Analyzing the data to be received source IP address";
	register rx_src_udp_addr              is (unmapped) "Analyzing the data to be received source UDP address";
	register rx_sampling_port_freshness   is (unmapped) "Analyzing the sample port to receive data frames freshness";
	register rec_frame_drop               is (unmapped) "Clear the current data frame";
}

bank mib {
	parameter register_size = 4;
	register ESID				is (unmapped) 	 "ESID";
	register ESVer				is (unmapped)	 "ESVer";
	register ESPosition			is (unmapped)	"ESPosition";
	register ESTx				is (unmapped) 	"ESPosition";
	register ESTxCnt			is (unmapped)	"ES Tx Count";
	register ESTxIPCnt			is (unmapped)	"ESTxIPCnt";
	register ESTxICMPCnt		is (unmapped)	"ESTxICMPCnt";
	register ESTxUDPCnt			is (unmapped)  "ESTxUDPCnt";
	register ESRx				is (unmapped) "ESRx";
	register ESRxCnt			is (unmapped)	"ESRxCnt";
	register ESRxIPCnt			is (unmapped)  "ESRxIPCnt";
	register ESRxUDPCnt			is (unmapped)  "ESRxUDPCnt";
	register PortRx				is (unmapped)  "PortRx";
	register APortRx			is (unmapped)	"APortRx";
	register APortRxCnt			is (unmapped)	"APortRxCnt";
	register APortCRCErrCnt		is (unmapped)	"APortCRCErrCnt";
	register AAlignmentErrorCnt is (unmapped)  "AAlignmentErrorCnt";
	register ALengthExceedCnt64 is (unmapped)  "ALengthExceedCnt64";
	register ALengthExceedCnt1518 is (unmapped) "ALengthExceedCnt1518";
	register APortSNErrorCnt	is (unmapped)	"APortSNErrorCnt";
	register APortVLIDErrCnt	is (unmapped)	"APortVLIDErrCnt";
	register BPortRx			is (unmapped)	"BPortRx";
	register BPortRxCnt			is (unmapped)	"BPortRxCnt";
	register BPortRxErrCnt		is (unmapped)	"BPortRxErrCnt";
	register BAlignmentErrorCnt	is (unmapped)	"BAlignmentErrorCnt";
	register BLengthExceedCnt64	is (unmapped)	"BLengthExceedCnt64";
	register BLengthExceedCnt1518 is (unmapped) "BLengthExceedCnt1518";
	register BPortSNErrorCnt	is (unmapped)	"BPortSNErrorCnt";
	register BPortVLIDErrCnt	is (unmapped)	"BPortVLIDErrCnt";
	register ESRxIPErrCnt		is (unmapped)	"ESRxIPErrCnt";
	register UDPComPortErr		is (unmapped)	"UDPComPortErr";
	register ESStatusClr		is (unmapped)	"ESStatusClr";
	register ESReset			is (unmapped)	"ESReset";
	register EquipmentOnline	is (unmapped)	"EquipmentOnline";
	register ESUpTime			is (unmapped)	"ESUpTime";
	register ESException		is (unmapped)  "ESException";
}

bank tx_regs { 
	register tx_port_id	{    
		field id [9:0] "Port ID";
	}    
	
    register tx_frame_len { 
		field frame_len [17:0] "Send frame length";
	}

	register tx_dst_udp_addr {
		field dst_udp_addr [15:0] "Dest UDP address";
	}
	
	register tx_buf_overflow {
		field del_frame_id_valid_bit [1:1] "Deleting data frame identifier valid bit";
		field del_frame_id_bit [0:0] "Deleting data frame ID";
		
		method after_read(memop) {
			$this.del_frame_id_valid_bit = 0;
		}
	}
}

bank rx_regs {
	register rx_check_valid	{
    	method read() -> (value) {
			local uint32 port_id = $rx_regs.rx_port_id;
			local bool is_empty;
			if (port_id >= 0 && port_id < 128) {
			    switch ($port[port_id].port_type) {
			        case 0: case 1:
				        inline $IsPortQueueEmpty(&($port[port_id].queue)) ->(is_empty);
						break;
					case 2:
					    inline $IsPortSampleEmpty(&($port[port_id])) -> (is_empty);
						break;
					default:
					    log "error" : "Unsuported port type";
						break;
			    }
            } else {
			    log "error": "wrong port id";
			}			
			
			if (is_empty)
				value = 0;
			else 
				value = 1;
		}
	}
	
	
	register rx_rec_network {
        field rxdn [1:0] "receive data frame network" {
            method read() -> (value) {
                if (value == 1)
                    log "info",4,0: "data frame from network A";
                else if (value == 2)
                    log "info",4,0: "data frame from network B";
                else if (value == 3)
        
				log "info",4,0: "data frame from both network A and network B";
            }
        }
        field res [31:2] is (reserved);
	}	
	
	register rx_rec_time1 {
        field us [9:0] "us";
        field ms [19:10] "ms";
        field s [25:20] "s";
        field min [31:26] "min";
	}
	
	register rx_rec_time2 {
        field h [4:0] "hour";
        field day [13:5] "day";
        field res [31:14] is (reserved);
	}
	
	register rx_sampling_port_freshness {
		parameter hard_reset_value = 0x1;
	}
}
