dml 1.2;

import "vl.dml";
import "checksum.dml";
import "constant.dml";
import "port-queue.dml";
import "binary-search.dml";
import "config-tables.dml";
import "packet-description.dml";

data uint8 udp_first[PORT_SIZE];   //init with 1;

method init_udp_flag() {
    memset($udp_first,1,PORT_SIZE);
}

method unpacket_frame(uint8 *buffer,uint32 size)->(RX_MIB rx_mib) {
	local uint8 correct;
	local uint16 dest_udp;
	local uint16 vl;
	local uint32 dest_ip;
	local uint1 multicast;
	local uint1 mf;
	local uint32 port_id;
	local analyse_cfg_cam T;
	local uint1 enable_network_A;
	local uint1 enable_network_B;
	local uint2 port_type;
	local bool result;
	
	local UDP_Item udp_item;
	
    if ($is_unpacket_frame_log_on) {
        call $print_unpacket_frame_begin();
    }
    
	call $unpacket_ip_checksum(buffer)->(correct);		//IP checksum
	if (correct == INCORRECT) {
		log "info": "ip checksum error!";
		rx_mib.ip_checksum_filt_count++;
		return ;
	} else {
        if ($is_unpacket_frame_log_on) {
            call $print_unpacket_frame_ip_checksum();
        }
	}
	rx_mib.rx_ip_data_count++;
	dest_udp =*cast((buffer + UDP_DEST_ADDR),uint16*);
	
    dest_ip = *cast(buffer + IP_DEST_ADDR,uint32 *);
	vl	= *(buffer + VL_ADDR);
	multicast = cast(*(buffer + MULTICAST_ADDR) >>7,uint1);
	mf =cast((*(buffer +MF_ADDR)>>5) &0x1, uint1);

	T.cam_data_part1.MULTICAST_ID = multicast;
	T.cam_data_part2.DEST_IP = dest_ip;
	T.cam_data_part3.VL= vl;
	T.cam_data_part3.DEST_UDP = dest_udp;
	//find port through  item group. single has IP dest address ,mulitple hasn't IP dest address

	call $BinarySearchAnalyseCfgCamArray(($analyse_cfg_cam_array), T) -> (port_id);
    if (port_id == -1) {
        log "error" : "Can't find this conf in current analyse cfg cam table, please check!";
        return;
    }
    
    port_id = $analyse_cfg_cam_array[port_id].address;
	enable_network_A =$analyse_cfg_ram_array[port_id].ram_data.NETWORK_A_ENABLE;
	enable_network_B = $analyse_cfg_ram_array[port_id].ram_data.NETWORK_B_ENABLE;
	
	if (enable_network_A != $analyse_cfg_ram_array[port_id].ram_data.NETWORK_A_ENABLE) {
		log "info": "enable network A error!";
		return;
	} else {
        if ($is_unpacket_frame_log_on) {
            call $print_unpacket_frame_network_A();
        }
	}

	if (enable_network_B != $analyse_cfg_ram_array[port_id].ram_data.NETWORK_B_ENABLE) {
		log "info": "enable network B error!";
		return;
	} else {
        if ($is_unpacket_frame_log_on) {
            call $print_unpacket_frame_network_B();
        }
	}

	udp_item.port_type = $analyse_cfg_ram_array[port_id].ram_data.PORT_TYPE; 

	if ($udp_first[port_id] == RECEIVE_UDP_FIRST) {
		udp_item.udp_length = *cast(buffer + UDP_LENGTH_ADDR,uint16 *);
		rx_mib.rx_udp_data_count++;
	} else {
		udp_item.udp_length = 0;
    }
	
	udp_item.buffer = buffer + UDP_HEADER_ADDR;
	udp_item.dest_ip = dest_ip;
	udp_item.src_ip = *cast(buffer+SRC_IP_ADDR,uint32 *);
	udp_item.udp_packet_size = size - (IP_HEADER_LENGTH + MAC_HEADER_LENGTH +IPV4_LENGTH + SN_CRC_LENGTH);
	udp_item.mf =mf;
    udp_item.dest_udp = dest_udp;
    

    
	if (port_id >= 0 && port_id < 4096) {
		switch (udp_item.port_type) {
			case 0: case 1:
			    call $EnPortQueue(($port[port_id].queue),udp_item)->(result);
                if ($is_unpacket_frame_log_on) {
                    call $print_unpacket_frame_PortQueue();
                }
				if(result == false) {
					log "info": "port queue is full";
				}
				break;
			case 2:
			    call $RefreshPortData(&($port[port_id]), udp_item);
                if ($is_unpacket_frame_log_on) {
                    call $print_unpacket_frame_Refresh();
                }
			default:
			    log "error" : "Unsupported port type";
			    break;
		}
	} else {
		log "info": "wrong port id";
	}
	
	if (mf == 0) {
		$udp_first[port_id] = 1;
    } else {
		$udp_first[port_id] = 0;
    }
}
