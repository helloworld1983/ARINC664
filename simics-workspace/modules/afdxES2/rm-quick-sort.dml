dml 1.2;

import "config-tables.dml";

//
// if pivotkey > L[position] return true, else return false
// 
method is_bigger_rm_(rm_cfg_cam pivotkey, rm_cfg_cam *L, int position) -> (bool result) {
	if (pivotkey.VL_ID > L[position].VL_ID) {
		result = true;
	} else {
		result = false;
	} 
}

//
// if pivotkey < L[position] return true, else return false
// 
method is_smaller_rm_(rm_cfg_cam pivotkey, rm_cfg_cam *L, int position) -> (bool result) {
	if (pivotkey.VL_ID < L[position].VL_ID) {
		result = true;
	} else {
		result = false;
	}
}


method swap_rm_cam_array_item(rm_cfg_cam *L, int low, int high) {
    local rm_cfg_cam tmp = L[low];
    L[low] = L[high];
    L[high] = tmp;
}
		
method partition_of_rm_cam_array(rm_cfg_cam *L, int low, int high) -> (int position) {
    local rm_cfg_cam pivotkey;
    local bool is_bigger;
    local bool is_smaller;
    
    pivotkey = L[low];
			
    while (low < high) {
        inline $is_bigger_rm_(pivotkey, L, high) -> (is_bigger);
        while ((low < high) && !is_bigger) {
            --high;
            inline $is_bigger_rm_(pivotkey, L, high) -> (is_bigger);
        }
        L[low] = L[high];
				
        inline $is_smaller_rm_(pivotkey, L, low) -> (is_smaller);
        while ((low < high) && !is_smaller) {
            ++low;
            inline $is_smaller_rm_(pivotkey, L, low) -> (is_smaller);
        }
        L[high] = L[low];
    }

    L[low] = pivotkey;
    position = low;
}
		
method qsort_rm_cam_array(rm_cfg_cam *L, int low, int high) {
    local int pivot;
    if (low < high) {
        call $partition_of_rm_cam_array(L, low, high) -> (pivot);
        call $qsort_rm_cam_array(L, low, pivot - 1);
        call $qsort_rm_cam_array(L, pivot + 1, high);
    }		
}
		
method QuickSortRMCamArray(rm_cfg_cam *L) {
    local uint8 i = 0;
    call $qsort_rm_cam_array(L, 0, $rm_cfg_cam_index - 1);
}
