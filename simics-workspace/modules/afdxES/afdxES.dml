// Copyright 2005-2011 Virtutech AB
dml 1.2;

device afdxES;

parameter desc = "afdx End System";
parameter documentation = "afdx End System";
parameter byte_order = "big-endian"; 
 
import "utility.dml";
import "io-memory.dml";
import "simics/devs/memory-space.dml";
import "packet-frame.dml";
import "config-tables.dml";
import "vl.dml";
import "constant.dml";
import "unpacket-frame.dml";
import "afdx-exchange.dml";
import "pci-action.dml";
import "pci-register.dml";
import "change-endian.dml";
import "tomiddleware.dml";
import "rm-handler.dml";

extern int qt_socket_init(void);
extern int qt_socket_recv(char *recvbuf, int size);
extern int qt_socket_send(char *sendbuf, int size);
extern int Strlen(char *str);
extern int netStrlen(char *str);
extern int Ntohl(int data);
extern int Htonl(int data);

extern void set_afdxES_module_runtime_header(void *p);
extern void set_afdxES_module_runtime_name(void *p);
extern void set_afdxES_module_runtime_description(void *p, int flag);
extern void free_afdxES_module_runtime_header(void *p);
extern void free_afdxES_module_runtime_name(void *p);
extern void free_afdxES_module_runtime_description(void *p);

extern void set_main_board_module_runtime_header(void *p);
extern void set_main_board_module_runtime_name(void *p);
extern void set_main_board_module_runtime_description(void *p, int flag);
extern void free_main_board_module_runtime_header(void *p);
extern void free_main_board_module_runtime_name(void *p);
extern void free_main_board_module_runtime_description(void *p);

extern void set_vxworks_runtime_header(void *p);
extern void set_vxworks_runtime_name(void *p);
extern void set_vxworks_runtime_description(void *p, int flag);
extern void free_vxworks_runtime_header(void *p);
extern void free_vxworks_runtime_name(void *p);
extern void free_vxworks_runtime_description(void *p);

extern void set_afdxES2_mib_runtime_header(void *p);
extern void free_afdxES2_mib_runtime_header(void *p);

extern void set_a664_driver_middleware_runtime_header(void *p);
extern void set_a664_driver_middleware_runtime_name(void *p);
extern void set_a664_driver_middleware_runtime_description(void *p, int flag);
extern void free_a664_driver_middleware_runtime_header(void *p);
extern void free_a664_driver_middleware_runtime_name(void *p);
extern void free_a664_driver_middleware_runtime_description(void *p);

extern void set_a664_middleware_runtime_header(void *p);
extern void set_a664_middleware_runtime_name(void *p);
extern void set_a664_middleware_runtime_description(void *p, int flag);
extern void free_a664_middleware_runtime_header(void *p);
extern void free_a664_middleware_runtime_name(void *p);
extern void free_a664_middleware_runtime_description(void *p);

extern void set_a664_card_runtime_header(void *p);
extern void set_a664_card_runtime_name(void *p);
extern void set_a664_card_runtime_description(void *p, int flag);
extern void free_a664_card_runtime_header(void *p);
extern void free_a664_card_runtime_name(void *p);
extern void free_a664_card_runtime_description(void *p);

connect phyA {
	parameter documentation = "Send data to the second ARINC664 card";
    parameter configuration = "optional";

    interface ieee_802_3_mac {
        parameter c_type = "ieee_802_3_mac_interface_t";
    }
}

connect phyB {
	parameter documentation = "Send data to the second ARINC664 card";
    parameter configuration = "optional";

    interface ieee_802_3_mac {
        parameter c_type = "ieee_802_3_mac_interface_t";
    }
}

implement ieee_802_3_mac {
	method send_frame(uint8 *data, uint32 size) {
        local rm_cfg_cam item;
        local uint8 rm_index;
		local bool is_crc_ok;
        local RM_INFO rm_info;

        if ($is_ieee_802_3_log_on) {
            call $print_ieee_802_3_mac_begin();
        }
	    call $recv_crc_check(data,size,$Table)->(is_crc_ok);
       
		if (is_crc_ok == false) {
			log "info":"crc check failed";
            return;
		} else {
            if ($is_ieee_802_3_log_on) {
                call $print_ieee_802_3_mac_crc();
            }
        }
		
		call $change_endian(data, size);

        item.VL_ID = data[4];
        call $BinarySearchRMCfgCamArray($rm_cfg_cam_array, item) -> (rm_index);
        if (rm_index == -1) {
            log "error" : "Can't find this conf in current rm cfg cam table, please check!";
        } else {
            rm_index = $rm_cfg_cam_array[rm_index].address;
        }
        
        call $Init_RM_INFO(&rm_info, rm_index, size);

		local uint8 interface_id = data[11] >> 5;
        local uint8 frame_sn = data[size-5];
        local bool is_rm_ok;
        
        call $RM_Handler(&rm_info, interface_id, frame_sn) -> (is_rm_ok);
        if (is_rm_ok) {
            if ($is_ieee_802_3_log_on) {
                call $print_ieee_802_3_mac_rm();
            }
            call $unpacket_frame(data, size);
        } else {
			// log "error" : "Send from unkown network";
        }
	}
}

implement transmit_runtime_info_between_afdxES_and_afdxES2 {
    method transmit_runtime_info(Runtime_Info *runtime_info) {
        call $Transmit_runtime_info(runtime_info);
    }
    
    method transmit_mib_info(MAC_MIB *maca_mib_info, MAC_MIB *macb_mib_info, RX_MIB *rx_mib_info, TX_MIB *tx_mib_info) {
        call $Transmit_mib_info(maca_mib_info, macb_mib_info, rx_mib_info, tx_mib_info);
    }
}

method Transmit_runtime_info(Runtime_Info *runtime_info) {
    local int buf_len = runtime_info->header_length + Strlen(runtime_info->header) + sizeof(runtime_info->len) + runtime_info->len;
    local char *buf = new char [buf_len];

    local int header_length = Htonl(runtime_info->header_length);
    local int name_length = Htonl(runtime_info->name_length);
    local int description_length = Htonl(runtime_info->description_length);
    local int len = Htonl(runtime_info->len);
    local int type = Htonl(runtime_info->type);
    local int flag = Htonl(runtime_info->flag);
            
    memcpy(buf,
           &header_length,
           sizeof(runtime_info->header_length));
    memcpy(buf + sizeof(runtime_info->header_length),
           runtime_info->header,
           runtime_info->header_length);
    memcpy(buf + sizeof(runtime_info->header_length) + runtime_info->header_length,
           &len,
           sizeof(runtime_info->len));
    memcpy(buf + sizeof(runtime_info->header_length) + runtime_info->header_length + sizeof(runtime_info->len),
           &type,
           sizeof(runtime_info->type));
    memcpy(buf + sizeof(runtime_info->header_length) + runtime_info->header_length + sizeof(runtime_info->len) + sizeof(runtime_info->type),
           &name_length,
           sizeof(runtime_info->name_length));
    memcpy(buf + sizeof(runtime_info->header_length) + runtime_info->header_length + sizeof(runtime_info->len) + sizeof(runtime_info->type) + sizeof(runtime_info->name_length),
           runtime_info->name,
           runtime_info->name_length);
    memcpy(buf + sizeof(runtime_info->header_length) + runtime_info->header_length + sizeof(runtime_info->len) + sizeof(runtime_info->type) + sizeof(runtime_info->name_length) +
           runtime_info->name_length,
           &flag,
           sizeof(runtime_info->flag));
    memcpy(buf + sizeof(runtime_info->header_length) + runtime_info->header_length + sizeof(runtime_info->len) + sizeof(runtime_info->type) + sizeof(runtime_info->name_length) +
           runtime_info->name_length + sizeof(runtime_info->flag),
           &description_length,
           sizeof(runtime_info->description_length));        
    memcpy(buf + sizeof(runtime_info->header_length) + runtime_info->header_length + sizeof(runtime_info->len) + sizeof(runtime_info->type) + sizeof(runtime_info->name_length) +
           runtime_info->name_length + sizeof(runtime_info->flag) + sizeof(runtime_info->description_length),
           runtime_info->description,
           runtime_info->description_length);
    
    qt_socket_send(buf, buf_len);

    delete buf;        
}

method Transmit_mib_info(MAC_MIB *maca_mib_info, MAC_MIB *macb_mib_info, RX_MIB *rx_mib_info, TX_MIB *tx_mib_info) {
    local Runtime_Info runtime_info;
    local int buf_len;
    local char *buf;
    local int header_length;
    local int len;
    local int type;
    
    set_afdxES2_mib_runtime_header(&runtime_info.header);
    runtime_info.header_length = Strlen(runtime_info.header);
    header_length = Htonl(runtime_info.header_length);
    runtime_info.len = sizeof(runtime_info.type) + sizeof(*maca_mib_info) + sizeof(*macb_mib_info) + sizeof(*rx_mib_info) + sizeof(*tx_mib_info);    
    len = Htonl(runtime_info.len);
    runtime_info.type = 1;
    type = Htonl(runtime_info.type);
    
    buf_len = runtime_info.header_length + Strlen(runtime_info.header) + sizeof(runtime_info.len) + runtime_info.len;

    buf = new char [buf_len];

    memcpy(buf,
           &header_length,
           sizeof(runtime_info.header_length));
    memcpy(buf + sizeof(runtime_info.header_length),
           runtime_info.header,
           runtime_info.header_length);
    memcpy(buf + sizeof(runtime_info.header_length) + runtime_info.header_length,
           &len,
           sizeof(runtime_info.len));
    memcpy(buf + sizeof(runtime_info.header_length) + runtime_info.header_length + sizeof(runtime_info.len),
           &type,
           sizeof(runtime_info.type));
    
    local uint8 i;
    local uint32 tmp;
    for (i = 0; i < sizeof(*maca_mib_info) / sizeoftype(uint32); ++i) {
        tmp = Htonl(*(cast(maca_mib_info, uint32*) +i));
        memcpy(buf + sizeof(runtime_info.header_length) + runtime_info.header_length +
               sizeof(runtime_info.len) + sizeof(runtime_info.type) + i*4,
               &tmp,
               sizeoftype(uint32));
    }

    for (i = 0; i < sizeof(*macb_mib_info) / sizeoftype(uint32); ++i) {
        tmp = Htonl(*(cast(macb_mib_info, uint32*) +i));
        memcpy(buf + sizeof(runtime_info.header_length) + runtime_info.header_length +
               sizeof(runtime_info.len) + sizeof(runtime_info.type) + sizeof(*maca_mib_info) + i*4,
               &tmp,
               sizeoftype(uint32));
    }
    
    for (i = 0; i < sizeof(*rx_mib_info) / sizeoftype(uint32); ++i) {
        tmp = Htonl(*(cast(rx_mib_info, uint32*) +i));
		memcpy(buf + sizeof(runtime_info.header_length) + runtime_info.header_length +
               sizeof(runtime_info.len) + sizeof(runtime_info.type) + sizeof(*maca_mib_info) + sizeof(*macb_mib_info) + i*4,
               &tmp,
               sizeoftype(uint32));
    }

    for (i = 0; i < sizeof(*tx_mib_info) / sizeoftype(uint32); ++i) {
        tmp = Htonl(*(cast(tx_mib_info, uint32*) +i));
        memcpy(buf + sizeof(runtime_info.header_length) + runtime_info.header_length +
               sizeof(runtime_info.len) + sizeof(runtime_info.type) + sizeof(*maca_mib_info) + sizeof(*macb_mib_info) + sizeof(*rx_mib_info) + i*4,
               &tmp,
               sizeoftype(uint32));
    }

    qt_socket_send(buf, buf_len);

    delete buf;
}

method init_main_board_module_ok() {
    local Runtime_Info runtime_info;
    
    set_main_board_module_runtime_header(&runtime_info.header);
    runtime_info.header_length = Strlen(runtime_info.header);
    runtime_info.type = 0;
    set_main_board_module_runtime_name(&runtime_info.name);
    runtime_info.name_length = Strlen(runtime_info.name);
    runtime_info.flag = 0;
    set_main_board_module_runtime_description(&runtime_info.description, runtime_info.flag);
    runtime_info.description_length = Strlen(runtime_info.description);
    runtime_info.len = sizeof(runtime_info.type) + sizeof(runtime_info.name_length) + Strlen(runtime_info.name) +
        sizeof(runtime_info.flag) + sizeof(runtime_info.description_length) + Strlen(runtime_info.description);
    
    call $Transmit_runtime_info(&runtime_info);

    free_main_board_module_runtime_header(&runtime_info.header);
    free_main_board_module_runtime_name(&runtime_info.name);
    free_main_board_module_runtime_description(&runtime_info.description);    
}

method init_A664_module_ok() {
    local Runtime_Info runtime_info;
    
    set_afdxES_module_runtime_header(&runtime_info.header);
    runtime_info.header_length = Strlen(runtime_info.header);
    runtime_info.type = 0;
    set_afdxES_module_runtime_name(&runtime_info.name);
    runtime_info.name_length = Strlen(runtime_info.name);
    runtime_info.flag = 0;
    set_afdxES_module_runtime_description(&runtime_info.description, runtime_info.flag);
    runtime_info.description_length = Strlen(runtime_info.description);
    runtime_info.len = sizeof(runtime_info.type) + sizeof(runtime_info.name_length) + Strlen(runtime_info.name) +
        sizeof(runtime_info.flag) + sizeof(runtime_info.description_length) + Strlen(runtime_info.description);
    
    call $Transmit_runtime_info(&runtime_info);

    free_afdxES_module_runtime_header(&runtime_info.header);
    free_afdxES_module_runtime_name(&runtime_info.name);
    free_afdxES_module_runtime_description(&runtime_info.description);
}

method init_vxworks_ok() {
    local Runtime_Info runtime_info;
    
    set_vxworks_runtime_header(&runtime_info.header);
    runtime_info.header_length = Strlen(runtime_info.header);
    runtime_info.type = 0;
    set_vxworks_runtime_name(&runtime_info.name);
    runtime_info.name_length = Strlen(runtime_info.name);
    runtime_info.flag = 0;
    set_vxworks_runtime_description(&runtime_info.description, runtime_info.flag);
    runtime_info.description_length = Strlen(runtime_info.description);
    runtime_info.len = sizeof(runtime_info.type) + sizeof(runtime_info.name_length) + Strlen(runtime_info.name) +
        sizeof(runtime_info.flag) + sizeof(runtime_info.description_length) + Strlen(runtime_info.description);
    
    call $Transmit_runtime_info(&runtime_info);

    free_vxworks_runtime_header(&runtime_info.header);
    free_vxworks_runtime_name(&runtime_info.name);
    free_vxworks_runtime_description(&runtime_info.description);
}

method init_a664_driver_middleware_ok() {
    local Runtime_Info runtime_info;
    
    set_a664_driver_middleware_runtime_header(&runtime_info.header);
    runtime_info.header_length = Strlen(runtime_info.header);
    runtime_info.type = 0;
    set_a664_driver_middleware_runtime_name(&runtime_info.name);
    runtime_info.name_length = Strlen(runtime_info.name);
    runtime_info.flag = 0;
    set_a664_driver_middleware_runtime_description(&runtime_info.description, runtime_info.flag);
    runtime_info.description_length = Strlen(runtime_info.description);
    runtime_info.len = sizeof(runtime_info.type) + sizeof(runtime_info.name_length) + Strlen(runtime_info.name) +
        sizeof(runtime_info.flag) + sizeof(runtime_info.description_length) + Strlen(runtime_info.description);
    
    call $Transmit_runtime_info(&runtime_info);

    free_a664_driver_middleware_runtime_header(&runtime_info.header);
    free_a664_driver_middleware_runtime_name(&runtime_info.name);
    free_a664_driver_middleware_runtime_description(&runtime_info.description);
}

method init_a664_middleware_ok() {
    local Runtime_Info runtime_info;
    
    set_a664_middleware_runtime_header(&runtime_info.header);
    runtime_info.header_length = Strlen(runtime_info.header);
    runtime_info.type = 0;
    set_a664_middleware_runtime_name(&runtime_info.name);
    runtime_info.name_length = Strlen(runtime_info.name);
    runtime_info.flag = 0;
    set_a664_middleware_runtime_description(&runtime_info.description, runtime_info.flag);
    runtime_info.description_length = Strlen(runtime_info.description);
    runtime_info.len = sizeof(runtime_info.type) + sizeof(runtime_info.name_length) + Strlen(runtime_info.name) +
        sizeof(runtime_info.flag) + sizeof(runtime_info.description_length) + Strlen(runtime_info.description);
    
    call $Transmit_runtime_info(&runtime_info);

    free_a664_middleware_runtime_header(&runtime_info.header);
    free_a664_middleware_runtime_name(&runtime_info.name);
    free_a664_middleware_runtime_description(&runtime_info.description);
}

method init_a664_card_ok() {
    local Runtime_Info runtime_info;
    
    set_a664_card_runtime_header(&runtime_info.header);
    runtime_info.header_length = Strlen(runtime_info.header);
    runtime_info.type = 0;
    set_a664_card_runtime_name(&runtime_info.name);
    runtime_info.name_length = Strlen(runtime_info.name);
    runtime_info.flag = 0;
    set_a664_card_runtime_description(&runtime_info.description, runtime_info.flag);
    runtime_info.description_length = Strlen(runtime_info.description);
    runtime_info.len = sizeof(runtime_info.type) + sizeof(runtime_info.name_length) + Strlen(runtime_info.name) +
        sizeof(runtime_info.flag) + sizeof(runtime_info.description_length) + Strlen(runtime_info.description);
    
    call $Transmit_runtime_info(&runtime_info);

    free_a664_card_runtime_header(&runtime_info.header);
    free_a664_card_runtime_name(&runtime_info.name);
    free_a664_card_runtime_description(&runtime_info.description);
}

attribute middleware_mode "Used to switch middleware mode" { 
    parameter documentation = "Used to switch work mode (to664middleware/to429middleware)";
    parameter allocate_type = "uint32";
}

attribute is_cfg_done "If true, don't change cfg table index and write cfg table again!" {
    parameter allocate_type = "bool";
}

// USER-TODO: Add init() and post_init() methods here, if needed.
// init() will be run to set the empty state of the model, before any
// configuration or checkpointed attributes are set.  post_init() is run after
// all configuration attributes have been set.  This happens both when the
// initial configuration is set and when the configuration is loaded from a
// checkpoint.

method post_init() {
    qt_socket_init();
    call $init_main_board_module_ok();
    call $pci_config.update_all_mappings();   
	call $gen_normal_table($Table);
    call $init_port_queue();
    call $init_middleware_mode();
    call $init_udp_flag();
    call $init_vl_cfg();
    call $init_A664_module_ok();
}
