dml 1.2;

struct RM_INFO {
    uint8 VL_ENABLE;
    uint8 RM_ENABLE;
    uint8 NETWORK_A_IC_ENABLE;
    uint8 NETWORK_B_IC_ENABLE;
    uint8 NETWORK_A_ENABLE;
    uint8 NETWORK_B_ENABLE;
    uint8 A_Interface_ID;
    uint8 B_Interface_ID;
    uint8 rm_index;
    uint32 frame_size;
}

connect phyA {
	parameter documentation = "Send data to the second ARINC664 card";
    parameter configuration = "optional";

    interface ieee_802_3_mac {
        parameter c_type = "ieee_802_3_mac_interface_t";
    }
}

connect phyB {
	parameter documentation = "Send data to the second ARINC664 card";
    parameter configuration = "optional";

    interface ieee_802_3_mac {
        parameter c_type = "ieee_802_3_mac_interface_t";
    }
}

implement ieee_802_3_mac {
	method send_frame(uint8 *data, uint32 size) {
        call $recv_frame(data, size);
    }
}

method recv_frame(uint8 *data, uint32 size) { 
    local rm_cfg_cam item;
    local uint8 rm_index;
    local bool is_crc_ok;
    local RM_INFO rm_info;
    
    if ($is_ieee_802_3_log_on) {
        call $print_ieee_802_3_mac_begin();
    }
    call $recv_crc_check(data,size,$Table)->(is_crc_ok);
    
    if (is_crc_ok == false) {
        // log "info":"crc check failed";
        return;
    } else {
        if ($is_ieee_802_3_log_on) {
            call $print_ieee_802_3_mac_crc();
        }
    }
	
    call $change_endian(data, size);
    
    item.VL_ID = data[4];
    call $BinarySearchRMCfgCamArray($rm_cfg_cam_array, item) -> (rm_index);
    if (rm_index == -1) {
        // log "error" : "Can't find this conf in current rm cfg cam table, please check!";
    } else {
        rm_index = $rm_cfg_cam_array[rm_index].address;
    }
    
    call $Init_RM_INFO(&rm_info, rm_index, size);
    
    local uint8 interface_id = data[11] >> 5;
    local uint8 frame_sn = data[size-5];
    local bool is_rm_ok;
    
    call $RM_Handler(&rm_info, interface_id, frame_sn) -> (is_rm_ok);
    if (is_rm_ok) {
        if ($is_ieee_802_3_log_on) {
            call $print_ieee_802_3_mac_rm();
        }
        call $unpacket_frame(data, size);
    } else {
        // log "error" : "Send from unkown network";
    }
}

method Init_RM_INFO(RM_INFO *rm_info, uint8 rm_index, uint32 frame_size) {
    rm_info->VL_ENABLE = $rm_cfg_ram_array[rm_index].ram_data.VL_ENABLE;
    rm_info->RM_ENABLE = $rm_cfg_ram_array[rm_index].ram_data.RM_ENABLE;
    rm_info->NETWORK_A_IC_ENABLE = $rm_cfg_ram_array[rm_index].ram_data.NETWORK_A_IC_ENABLE;
    rm_info->NETWORK_B_IC_ENABLE = $rm_cfg_ram_array[rm_index].ram_data.NETWORK_B_IC_ENABLE;
    rm_info->NETWORK_A_ENABLE = $rm_cfg_ram_array[rm_index].ram_data.NETWORK_A_ENABLE;
    rm_info->NETWORK_B_ENABLE = $rm_cfg_ram_array[rm_index].ram_data.NETWORK_B_ENABLE;
    rm_info->rm_index = rm_index;
    rm_info->frame_size = frame_size;
}

method RM_Handler(RM_INFO *rm_info, uint8 interface_id, uint8 frame_sn) -> (bool result) {
    if (rm_info->VL_ENABLE == 0) {
        result = false;
        return;
    }

    if (rm_info->NETWORK_A_ENABLE == 1) {
        rm_info->A_Interface_ID = 1;
    } else {
        rm_info->A_Interface_ID = 0;
    }
    
    if (rm_info->NETWORK_B_ENABLE == 1) {
        rm_info->B_Interface_ID = 2;
    } else {
        rm_info->B_Interface_ID = 0;
    }


	if (interface_id == rm_info->A_Interface_ID) {
        call $mib_in_sum(&($maca_mib), rm_info->frame_size);
    } else if (interface_id == rm_info->B_Interface_ID) {
        call $mib_in_sum(&($macb_mib), rm_info->frame_size);
    }
    
    if ((frame_sn == $recv_vl[rm_info->rm_index].expect_sn) &&
        ((interface_id == rm_info->A_Interface_ID) ||
         (interface_id == rm_info->B_Interface_ID))) {
        $rx_mib.size += rm_info->frame_size;
        $recv_vl[rm_info->rm_index].expect_sn++;
        $recv_vl[rm_info->rm_index].expect_sn %= 256;
      
        result = true;
    } else {
		if(interface_id == rm_info->A_Interface_ID) {
			 $rx_mib.disable_A_filt_count++;
			 $rx_mib.redunt_filt_count++;
		}
		if(interface_id == rm_info->B_Interface_ID) {
			 $rx_mib.disable_B_filt_count++;
			 $rx_mib.redunt_filt_count++;
		}
        result = false;
    }
}
