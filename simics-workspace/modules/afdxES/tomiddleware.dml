dml 1.2;

import "port-cache.dml";

extern int Init_664_Work_Mode(void);
extern int Send_To_664_Middleware(char *recvbuf, int size);
extern int Recv_Data_From_664_Middleware(char *sendbuf, int size);
extern int Recv_Mib_Info_From_664_Middleware(char *recvbuf, int size);

constant ANALYSE_CFG_CAM = 0;
constant ANALYSE_CFG_RAM = 1;
constant TRANSMIT_CFG_RAM = 2;
constant SCHEDULING_CFG_RAM = 3;
constant RM_CFG_CAM = 4;
constant RM_CFG_RAM = 5;
constant FRAGMENT_CFG_RAM = 6;
constant PACKET_SEND = 7;
constant PACKET_RECV = 8;
constant DO_LOAD_CONF = 9;
constant PACKET_MAC_MIB = 10;
constant PACKET_RX_MIB = 11;
constant PACKET_TX_MIB = 12;
constant CFG_TYPE_SIZE = 4;
constant CFG_NUM = 128;


method Handle_664_Data(uint8 *data, int length) {
    local bool is_cached_ok;
    local Cache_Item item;
    local uint32 port_id;
    
    memcpy(item.buffer, data+2, length-2);
    item.size = length - 2;
    port_id = *cast(&data[1], uint8*);
    
    switch(data[0]) {
    case PACKET_RECV:
        call $EnPortCache($PortCache[port_id], item) -> (is_cached_ok);
        if (!is_cached_ok) {
            log "error" : "Port: %d's cache has full!\n", port_id;
            ++$rx_buf_overflow_number[port_id];
        }
        break;
    case PACKET_MAC_MIB: case PACKET_RX_MIB: case PACKET_TX_MIB:
        log "error" : "A fatal error， MAC_MIB， RX_MIB， and TX_MIB info cann't recv form this method!\n";
        break;
    default:
        log "error" : "Unsupported frame type!\n";
        break;
    }
}

method Recv_Data_From_664_Middleware_Loop_Event() {
    local int length;
    local uint8 *buf = new uint8 [PORT_DATA_SIZE];
    length = Recv_Data_From_664_Middleware(buf, PORT_DATA_SIZE);
    
    if (length > 0) {
        call $Handle_664_Data(buf, length);
    }
    
    after (1) call $Recv_Data_From_664_Middleware_Loop_Event();
}

method init_middleware_mode() {
    if ($middleware_mode == To664Middleware) {
        Init_664_Work_Mode();
        call $Recv_Data_From_664_Middleware_Loop_Event();
    }    
}

method LoadCfgTo664Middleware() {
    local uint32 data_type = 0;
    local uint32 cfg_table_size = 0;

    data_type = ANALYSE_CFG_CAM;
    cfg_table_size = sizeoftype(analyse_cfg_cam) * CFG_NUM;
    Send_To_664_Middleware(cast(&data_type, uint8*), CFG_TYPE_SIZE);
    Send_To_664_Middleware(cast(&$analyse_cfg_cam_array, uint8*), cfg_table_size);

    data_type = ANALYSE_CFG_RAM;
    cfg_table_size = sizeoftype(analyse_cfg_ram) * CFG_NUM; 
    Send_To_664_Middleware(cast(&data_type, uint8*), CFG_TYPE_SIZE);
    Send_To_664_Middleware(cast(&$analyse_cfg_ram_array, uint8*), cfg_table_size);

    data_type = TRANSMIT_CFG_RAM;
    cfg_table_size = sizeoftype(transmit_cfg_ram) * CFG_NUM; 
    Send_To_664_Middleware(cast(&data_type, uint8*), CFG_TYPE_SIZE);
    Send_To_664_Middleware(cast(&$transmit_cfg_ram_array, uint8*), cfg_table_size);

    data_type = SCHEDULING_CFG_RAM;
    cfg_table_size = sizeoftype(scheduling_cfg_ram) * CFG_NUM; 
    Send_To_664_Middleware(cast(&data_type, uint8*), CFG_TYPE_SIZE);
    Send_To_664_Middleware(cast(&$scheduling_cfg_ram_array, uint8*), cfg_table_size);

    data_type = RM_CFG_CAM;
    cfg_table_size = sizeoftype(rm_cfg_cam) * CFG_NUM;
    Send_To_664_Middleware(cast(&data_type, uint8*), CFG_TYPE_SIZE);
    Send_To_664_Middleware(cast(&$rm_cfg_cam_array, uint8*), cfg_table_size);

    data_type = RM_CFG_RAM;
    cfg_table_size = sizeoftype(rm_cfg_ram) * CFG_NUM; 
    Send_To_664_Middleware(cast(&data_type, uint8*), CFG_TYPE_SIZE);
    Send_To_664_Middleware(cast(&$rm_cfg_ram_array, uint8*), cfg_table_size);

    data_type = FRAGMENT_CFG_RAM;
    cfg_table_size = sizeoftype(fragment_cfg_ram) * CFG_NUM;
    Send_To_664_Middleware(cast(&data_type, uint8*), CFG_TYPE_SIZE);
    Send_To_664_Middleware(cast(&$fragment_cfg_ram_array, uint8*), cfg_table_size);

    data_type = DO_LOAD_CONF;
    Send_To_664_Middleware(cast(&data_type, uint8*), CFG_TYPE_SIZE);
}

method Send_Payload_To_664_Middleware(uint8 *data, uint32 port_id, uint32 length) {
    local uint32 data_type = 0;
    
    data_type = PACKET_SEND;
    Send_To_664_Middleware(cast(&data_type, uint8*), CFG_TYPE_SIZE);
    Send_To_664_Middleware(cast(&length, uint8*), CFG_TYPE_SIZE);
    Send_To_664_Middleware(cast(&port_id, uint8*), CFG_TYPE_SIZE);
    Send_To_664_Middleware(data, length);    
}
