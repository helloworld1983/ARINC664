dml 1.2;

import "vl.dml";
import "checksum.dml";
import "constant.dml";
import "packet-description.dml";
import "change_endian.dml";
import "crc.dml";
import "log.dml";

data bool init_send_time;

data uint16 fragment_identification;  //init

data double send_phy_delay;
data uint32 phyA_already_send_byte;
data uint32 phyB_already_send_byte;                    
data uint32 phy_max_bandwidth;
data uint8 *vl_index_array[SEND_VL_NUM];

method wrapped_frame(uint8 *buffer,uint32 buffer_length) {
	local Afdx_Frame_Packet	afdx_frame_packet;

	afdx_frame_packet.afdx_data.data = buffer;
	afdx_frame_packet.afdx_data.length = buffer_length;
	
	call $packet_udp_header(&afdx_frame_packet.udp_header_structure);
	call $packet_ip_header(&afdx_frame_packet.ip_header_structure);
	call $packet_mac_header(&afdx_frame_packet.mac_header_structure);
	call $send_frame_fragment(&afdx_frame_packet);
}

method packet_udp_header(Udp_Header_Structure *udp_header_structure) {
	local uint2 port_type = 0;
	local uint16 source_udp_port = 0; 
	local uint16 dest_udp_port = 0;
	local uint16 udp_length = 0;
	local uint13 fragment_offset =0;
	local uint16 ipv4 = 0x800;
	   
	$tx_mib.tx_udp_count++;

    port_type = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part1.PORT_TYPE;  
	source_udp_port = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part3.SOURCE_UDP_PORT;   

	if (port_type == SAP_PORT) {
		dest_udp_port = $pciport.tx_dst_udp_addr.dst_udp_addr;
    } else {
		dest_udp_port = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part3.DEST_UDP_PORT;
    }
		
	udp_header_structure->UDP_SOURCE_ADDRESS = source_udp_port;
	udp_header_structure->UDP_DESTINATION_ADDRESS = dest_udp_port;
	udp_header_structure->UDP_LENGTH = UDP_HEADER_LENGTH + $pciport.tx_frame_len.frame_len;  
	udp_header_structure->UDP_CHECKSUM = 0;

    if (1) {    // fix me
        local Upd_Header_Log udp_header_log;
        udp_header_log.port_type = port_type;
        udp_header_log.source_udp_port = source_udp_port;
        udp_header_log.dest_udp_port = dest_udp_port;
        udp_header_log.udp_header_structure = udp_header_structure;
        call $print_udp_header(&udp_header_log);
    }
}

method packet_ip_header(IP_Header_Structure *ip_header_structure) {
	local uint1 ip_multicast = 0;
	
	ip_multicast = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part1.IP_MULTICAST;    
	ip_header_structure->VERSION_IHL = 0x4 << 4 | 0x5;
	ip_header_structure->TYPE_OF_SERVICE = 0;
	ip_header_structure->TOTAL_LENGTH = IP_HEADER_LENGTH + UDP_HEADER_LENGTH + $pciport.tx_frame_len.frame_len;
	ip_header_structure->FRAGMENT_IDENTIFICATION = ++$fragment_identification;
	ip_header_structure->CONTROL_FRAGMENT = 0;
	ip_header_structure->TIME_TO_LIVE = 0xff;
	ip_header_structure->PROTOCAL = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part2.PROTOCAL_ID ;
	ip_header_structure->HEADER_CHECKSUM = 0;
	ip_header_structure->IP_SOURCE_ADDRESS = (0x0 << 31) | 
	                                        (0xa << 24) | 
											($transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part2.USER_DEFINED_ID << 8) |
											($transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part2.PARTITION_ID);
											
	if (ip_multicast == UNICAST) {
		ip_header_structure->IP_DESTINATION_ADDRESS = (0x0 << 31) | 
		                                               (0xa << 24) | 
													   ($transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part4.USER_DEFINED_ID_H  << 22) |
													   ($transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part4.USER_DEFINED_ID_L << 8);               
													   ($transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part4.PARTITION_ID);
	} else {
		ip_header_structure->IP_DESTINATION_ADDRESS = (0xe << 28) | (0xe0 << 16) | ($transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part1.VL_ID);    
	}

    if (0) {                    // fix me
        local IP_Header_Log ip_header_log;
        ip_header_log.ip_multicast = ip_multicast;
        ip_header_log.ip_header_structure = ip_header_structure;
        call $print_ip_heaer(&ip_header_log);
    }
}

method packet_mac_header(MAC_Header_Structrue *mac_header_structure) {
	mac_header_structure->CONSTANT_FIELD_1 = 0x3000000;
	mac_header_structure->VIRTUAL_LINK_IDENTIFER = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part1.VL_ID;
	mac_header_structure->CONSTANT_FIELD_2 = 0x2;
	mac_header_structure->CONSTANT_FIELD_3 = 0x0;
	mac_header_structure->CONSTANT_FIELD_4 = 0x0;
	mac_header_structure->USER_DEFINED_ID = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part2.USER_DEFINED_ID>>8;
	mac_header_structure->USER_DEFINED_ID_2 = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part2.USER_DEFINED_ID&0xff;
	
	mac_header_structure->INTERFACE_CONSTANT = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part2.INTERFACE_ID<<5 ;

    if (0) {
        call $print_mac_header(mac_header_structure);
    }
}

method packet_data(Item *afdx_frame, Afdx_Frame_Packet* afdx_frame_packet,int first) {
	local uint16 ipv4 = 0x800;
	local uint32 memcpy_offset = 0;
	local uint32 i;
	local uint32 udp_offset;
	
	memcpy(afdx_frame->frame, &afdx_frame_packet->mac_header_structure, MAC_HEADER_LENGTH);
	memcpy_offset += MAC_HEADER_LENGTH;
	memcpy(afdx_frame->frame + memcpy_offset, &ipv4, IPV4_LENGTH);
	memcpy_offset += IPV4_LENGTH;

	//ip checksum
	local uint16 ip_check_sum = 0; 
	afdx_frame_packet->ip_header_structure.TOTAL_LENGTH = IP_HEADER_LENGTH + UDP_HEADER_LENGTH + afdx_frame_packet->send_frame_packet.afdx_payload_length;
	call $ip_check_sum(cast(&afdx_frame_packet->ip_header_structure, uint8*), IP_HEADER_LENGTH) -> (ip_check_sum);
	
	afdx_frame_packet->ip_header_structure.HEADER_CHECKSUM = ip_check_sum;	
	memcpy(afdx_frame->frame + memcpy_offset, &afdx_frame_packet->ip_header_structure, IP_HEADER_LENGTH);

	memcpy_offset += IP_HEADER_LENGTH;
	if(afdx_frame_packet->send_frame_packet.first == FIRST)	{
		memcpy(afdx_frame->frame + memcpy_offset, &afdx_frame_packet->udp_header_structure, UDP_HEADER_LENGTH);
		memcpy_offset += UDP_HEADER_LENGTH;		   
		afdx_frame->size =afdx_frame_packet->send_frame_packet.header_length + UDP_HEADER_LENGTH + 
					      afdx_frame_packet->send_frame_packet.afdx_payload_length;
	} else {
        afdx_frame->size =afdx_frame_packet->send_frame_packet.header_length + 
            afdx_frame_packet->send_frame_packet.afdx_payload_length;        
    }
		
	memcpy(afdx_frame->frame + memcpy_offset,
		   afdx_frame_packet->afdx_data.data + afdx_frame_packet->send_frame_packet.udp_offset, 
		   afdx_frame_packet->send_frame_packet.send_frame_length);

	call $udp_check_sum(afdx_frame,afdx_frame_packet);
}

method send_frame_fragment(Afdx_Frame_Packet* afdx_frame_packet) {
	local Item	afdx_frame;
	memset(&afdx_frame, 0 ,sizeoftype(Item));	
	
	local int19 	min_frame_length = 0;    
	local int19 	max_frame_length = 0;    
	local int19 	send_frame_length = 0; 
	local int19 	afdx_payload_length = 0;  
	local int32 	header_length = 0;
	local uint13 	fragment_offset = 0;
	local uint32	i;
	
	afdx_frame_packet->send_frame_packet.first = 1;
	
	afdx_frame_packet->send_frame_packet.header_length = MAC_HEADER_LENGTH + IP_HEADER_LENGTH +  IPV4_LENGTH + SN_CRC_LENGTH;
	header_length =  afdx_frame_packet->send_frame_packet.header_length ;
	min_frame_length = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part1.MIN_FRAME_LENGTH - header_length;     // 获得UDP有效载荷的最小长度
	max_frame_length = $fragment_cfg_ram_array[$pciport.tx_port_id.id].MAX_FRAME_LENGTH - header_length;     // 获得UDP有效载荷的最大长度
	send_frame_length =afdx_frame_packet->udp_header_structure.UDP_LENGTH;  
	afdx_frame_packet->send_frame_packet.udp_offset = 0;
	
	log "info" : "=====================send frame fragment========================";	
	log "info" : "10 afdx_frame_packet->send_frame_packet.header_length =%d",afdx_frame_packet->send_frame_packet.header_length;	
	log "info" : "10 min_frame_length 1=%d",min_frame_length;	
	log "info" : "10 min_frame_length 2=%d",$transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part1.MIN_FRAME_LENGTH;	
	log "info" : "10 max_frame_length =%d",max_frame_length ;	
	log "info" : "10 send_frame_length  =%d",send_frame_length;	
	
	log "info" : "=====================send frame fragment========================";	
	
	while(send_frame_length > 0) {	
		if(send_frame_length > max_frame_length) {
            if(afdx_frame_packet->send_frame_packet.first ==FIRST) {
                afdx_frame_packet->send_frame_packet.afdx_payload_length = max_frame_length - UDP_HEADER_LENGTH;
            } else {
                afdx_frame_packet->send_frame_packet.afdx_payload_length = max_frame_length;
            }
				
            afdx_frame_packet->send_frame_packet.send_frame_length=afdx_frame_packet->send_frame_packet.afdx_payload_length;	
            send_frame_length -= max_frame_length;	 
            afdx_frame_packet->ip_header_structure.CONTROL_FRAGMENT = 1 << 13 | fragment_offset;
            fragment_offset += max_frame_length % 8;
		} else if(send_frame_length < min_frame_length)	{
			if(afdx_frame_packet->send_frame_packet.first==FIRST) {
				afdx_frame_packet->send_frame_packet.afdx_payload_length = min_frame_length - UDP_HEADER_LENGTH;
				afdx_frame_packet->send_frame_packet.send_frame_length = send_frame_length - UDP_HEADER_LENGTH;
				afdx_frame_packet->ip_header_structure.CONTROL_FRAGMENT = 1<<14;  
			} else {
				afdx_frame_packet->send_frame_packet.afdx_payload_length = min_frame_length;
				afdx_frame_packet->send_frame_packet.send_frame_length = send_frame_length; 				
				afdx_frame_packet->ip_header_structure.CONTROL_FRAGMENT = fragment_offset;  
			}

			send_frame_length =0;
		} else {
			if(afdx_frame_packet->send_frame_packet.first==FIRST) {
				afdx_frame_packet->send_frame_packet.afdx_payload_length = send_frame_length - UDP_HEADER_LENGTH;
							afdx_frame_packet->ip_header_structure.CONTROL_FRAGMENT = 1<<14;  
			} else {
				afdx_frame_packet->send_frame_packet.afdx_payload_length = send_frame_length;
				afdx_frame_packet->ip_header_structure.CONTROL_FRAGMENT = fragment_offset;  
			}
			afdx_frame_packet->send_frame_packet.send_frame_length=afdx_frame_packet->send_frame_packet.afdx_payload_length; 
			send_frame_length =0;
		}
		
		call $packet_data(&afdx_frame, afdx_frame_packet,afdx_frame_packet->send_frame_packet.first);
		afdx_frame_packet->send_frame_packet.udp_offset += afdx_frame_packet->send_frame_packet.send_frame_length;
		afdx_frame_packet->send_frame_packet.first = 0;
		
		local uint8 vl_index = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part1.VL_INDEX;
		local uint2 sub_vl_id = $transmit_cfg_ram_array[$pciport.tx_port_id.id].ram_data_part3.SUB_VL_ID;
		
		$tx_mib.tx_ip_count++;
		log "info" : "nic1 send to nic2";
		call $EnQueue(&($vl[vl_index].sub_queue[sub_vl_id]), afdx_frame);	
		log "info" : "init send time start!";
		if (!$init_send_time) {
		log "info" : "init send end!";
		    call $init_event();
            call $init_phy();
			$init_send_time = true;
	    }	
	}	
}

method init_event() {
	local uint8 k = 0;
	for (; k < 128; ++k) {
		local dbuffer_t *dbuf = new_dbuffer();
		local uint8 *index = dbuffer_append(dbuf, sizeoftype(uint8));
		
		*index = k;
		inline $send_frame.post($scheduling_cfg_ram_array[k].BAG / 1000000, index);
	}	
}

method init_phy() {
    $send_phy_delay = 0.001;
    inline $send_phy.post($send_phy_delay, NULL);
}

event send_frame {
	method event(void *data) {
	    local uint2 i; 
		local uint8 vl_index;
        local double delay_time = 0.005;

		vl_index = *cast(data, uint8*);
        *$vl_index_array[vl_index] = vl_index;
        
		for (i = $vl[vl_index].current_sub_id; i < 4; ++i) {
		    if ((($vl[vl_index].valid_id >> $vl[vl_index].current_sub_id) & 0x1) == 0x1) {
	           local Item item;
			  	
			   call $DeQueue(&($vl[vl_index].sub_queue[$vl[vl_index].current_sub_id]), &item);
		
			   ++$vl[vl_index].current_sub_id;
			
			   if (item.size != 0) {
                   delay_time = $scheduling_cfg_ram_array[vl_index].BAG / 1000000;
                   item.frame[item.size - 5] = $vl[vl_index].sn++;
                   $vl[vl_index].sn %= 256;
                   call $EnQueue(&$phy_queue.queue, item);
			   } else {
			       delay_time = 0.005;
			   }
			   break;
		    } else {
			    ++$vl[vl_index].current_sub_id;
            }
		}
        
		$vl[vl_index].current_sub_id %= 4;
        inline $send_frame.post(delay_time, $vl_index_array[vl_index]);
	}
}


event send_phy {
    method event(void *data) {
        local Item item;
        local Item item2;
        local uint32 item_size;
        local uint8 interface_id;

        call $GetFirstItemInfo(&$phy_queue.queue) -> (item_size, interface_id);
        if (item_size != 0) {
            if ($send_phy_delay == 0.1) {
                $phyA_already_send_byte = 0;
                $phyB_already_send_byte = 0;
                $send_phy_delay = 0.001;
            }
            // for test make interface_id = 3;
            //interface_id = 3;
			
            switch (interface_id) {
            case 1:
                if (item_size + $phyA_already_send_byte <= $phy_max_bandwidth) {
                    call $DeQueue(&$phy_queue.queue, &item);
					call $change_endian(item.frame,item.size);
					call $mib_out_sum(&($maca_mib),item.size);
                    // do CRC Check!
					call $crc_check(item.frame,item.size,$Table);
                    $phyA.data_exchange.send_frame(cast(&item.frame, uint8*), item.size);
                    $phyA_already_send_byte += item.size; 
                } else {
                    $send_phy_delay = 0.1;
                }
                break;
            case 2:
                if (item_size + $phyB_already_send_byte <= $phy_max_bandwidth) {
                    call $DeQueue(&$phy_queue.queue, &item);
					call $change_endian(item.frame,item.size);
                    // do CRC Check!
					call $crc_check(item.frame,item.size,$Table);
					call $mib_out_sum(&($macb_mib),item.size);
                    $phyB.data_exchange.send_frame(cast(&item.frame, uint8*), item.size);
                    $phyB_already_send_byte += item.size; 
                } else {
                    $send_phy_delay = 0.1;
                }
                break;
            case 3:
                if ((item_size + $phyA_already_send_byte <= $phy_max_bandwidth) &&
                    (item_size + $phyB_already_send_byte <= $phy_max_bandwidth)) {
                    call $DeQueue(&$phy_queue.queue, &item);
					memcpy(&item2,&item,sizeoftype(Item));
					item.frame[11]=1<<5;
					item2.frame[11]=1<<6;
						local uint32 i;
								
					call $change_endian(item.frame,item.size);
					call $change_endian(item2.frame,item2.size);

					
					call $mib_out_sum(&($maca_mib),item.size);
					call $mib_out_sum(&($macb_mib),item2.size);
                    // do CRC Check
					call $crc_check(item.frame,item.size,$Table);
                    $phyA.data_exchange.send_frame(cast(&item.frame, uint8*), item.size);

                    // do CRC Check
					call $crc_check(item2.frame,item2.size,$Table);
                    $phyB.data_exchange.send_frame(cast(&item2.frame, uint8*), item2.size);

                    $phyA_already_send_byte += item.size; 
                    $phyB_already_send_byte += item2.size; 
                } else {
                    $send_phy_delay = 0.1;
                }
                break;
            default:
                log "error" : "Unsupported INTERFACE_ID %d !", interface_id; 
            }
        } else {
            $send_phy_delay = 0.001;
        }

        inline $send_phy.post($send_phy_delay, NULL);
    }
}
method mib_out_sum(MAC_MIB *mib,int size)
{
	mib->output_frame_count++;  
	mib->output_frame_byte_count+=size;  		
	if(size <128)
		mib->output_64_127_count++;		
	else if(size<256)
		mib->output_128_255_count++;		
	else if(size<512)
		mib->output_256_511_count++;		
	else if(size < 1024)
		mib->output_512_1023_count++;		
	else if(size <=1518)
		mib->output_1024_1518_count++;		
}

method mib_in_sum(MAC_MIB *mib,int size)
{	
	mib->input_frame_byte_count+=size; 			
	mib->input_frame_count++;  
	if(size < 64)
		mib->delete_little_64++;  		
	else if(size < 128)
		mib->input_64_127_count++;			
	else if (size < 256)
		mib->input_128_255_count++;			
	else if(size < 512)
		mib->input_256_511_count++;		
	else if(size < 1024)
		mib->input_512_1023_count++;		
	else if(size <=1518)
		mib->input_1024_1518_count++;	
	else 
		mib->delete_big_1518++; 
}
