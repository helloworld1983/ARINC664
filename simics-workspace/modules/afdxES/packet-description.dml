dml 1.2;
import "constant.dml";


//AFDX_frame
struct Udp_Header_Structure {
	uint16 UDP_SOURCE_ADDRESS;       
	uint16 UDP_DESTINATION_ADDRESS;  
	uint16 UDP_LENGTH;            
	uint16 UDP_CHECKSUM;      
}

struct IP_Header_Structure {
   uint8  VERSION_IHL;
   uint8  TYPE_OF_SERVICE;
   uint16 TOTAL_LENGTH;
   uint16 FRAGMENT_IDENTIFICATION;
   uint16	CONTROL_FRAGMENT;
   uint8  TIME_TO_LIVE;
   uint8  PROTOCAL;
   uint16 HEADER_CHECKSUM;
   uint32 IP_SOURCE_ADDRESS;
   uint32 IP_DESTINATION_ADDRESS;
}

struct MAC_Header_Structrue {
   uint32 CONSTANT_FIELD_1;
   uint16 VIRTUAL_LINK_IDENTIFER;
   uint8 CONSTANT_FIELD_2;
   uint8 CONSTANT_FIELD_3;
   uint8 CONSTANT_FIELD_4;
   uint8 USER_DEFINED_ID;
   uint8 USER_DEFINED_ID_2;
   uint8 INTERFACE_CONSTANT;
}

struct Afdx_Data{
   uint8 *data;
   uint32 length;
}

struct Send_Frame_Packet{
   uint32	header_length;			//mac header, ip header ,ipv4sign ,sn ,crc
   uint32  afdx_payload_length;	   //send packet data size
   uint32	send_frame_length;
   uint32	first;
   uint32	udp_offset;				//udp offset
}

struct Afdx_Frame_Packet{
    Udp_Header_Structure	udp_header_structure;	  // UDP header
    IP_Header_Structure		ip_header_structure;	  // IP	 header
    MAC_Header_Structrue	mac_header_structure;	  // MAC header
    Afdx_Data				afdx_data;				  //send data and send data length
    Send_Frame_Packet		send_frame_packet;		  //send frame ,max, min length
}


//for queue
struct Item {
    uint8 frame[DATA_SIZE];    // 最长帧大小
    uint32 size;              // 有效帧长度
}

struct Queue {
    uint32 front;
    uint32 rear;
	
    Item item[ITEM_NUM];         // 这个用8K除以最小的帧长度64
	
    uint32 item_num;         // 用于存储当前已经存储了多少项
    uint32 frame_size;       // 存储的所有帧合并在一起的大小
}


//for port queue
struct QueueItem {
    uint8 *buffer;
    int32 whole_size;
    int32 single_size;
    int32 last;
    uint32 dest_ip;
    uint32 src_ip;
    uint16 dest_udp;
    QueueItem *prev_whole;
    QueueItem *next;
}

struct UDP_Item {
    uint8* buffer;
    uint32 udp_length;
    uint32 udp_packet_size;
    uint1 mf;
    uint32 dest_ip;
    uint32 src_ip;
    uint2 port_type;
    uint16 dest_udp;
}
    
struct PortItem {
    uint8 *frame;
    uint32 size;
    uint32 dest_ip;
    uint32 src_ip;
    uint16 dest_udp;
}

struct PortQueue {
    QueueItem *head;
    QueueItem *tail;
    int32 item_length;
    int32 queue_size;
    int32 queue_full;
}

